<?xml version="1.0" encoding="UTF-8"?>
<!--
  Created by IntelliJ IDEA.
  User: danp1t
  Date: 13.11.2024
  Time: 14:11
-->
<!DOCTYPE html
        PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:p="http://primefaces.org/ui" xmlns:c="http://java.sun.com/jsp/jstl/core">


<h:head>
    <title>Основная страничка</title>
    <link rel="stylesheet" href="styles.css"/>
    <script type="text/javascript">

        document.getElementById('myForm').addEventListener('submit', function(event) {
            event.preventDefault(); // Отменяем стандартное поведение формы

            const checkboxes = document.querySelectorAll('input[name="coor_x"]:checked');
            const yValue = document.getElementById('coor_y1').value;
            const rValue = document.getElementById('coor_r-select').value;

            const errorMessageDiv = document.getElementById('error_message');
            errorMessageDiv.textContent = ''; // Сбрасываем сообщение об ошибке

            if (checkboxes.length === 0 || yValue === '' || rValue === '') {
                errorMessageDiv.textContent = 'Ошибка: Не все поля заполнены!';
                return; // Прерываем выполнение, если есть ошибка
            }

            // Если все поля заполнены, можно отправить форму
            this.submit();
        });

        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        function drawAxes(R) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            let halfR = R / 2;
            ctx.beginPath();
            ctx.moveTo(200, 0);
            ctx.lineTo(200, 400); // Ось Y
            ctx.moveTo(0, 200);
            ctx.lineTo(400, 200); // Ось X
            ctx.stroke();
            ctx.fillStyle = 'black'
            ctx.fillText(-R, 200 - R*60, 215);
            ctx.fillText(R, 200 + R*60, 215);
            ctx.fillText(halfR, 200 + halfR*60, 215);
            ctx.fillText(-halfR, 200 - halfR*60, 215);
            ctx.fillText(-R, 205, 200 + R * 60);
            ctx.fillText(R, 205, 200 - R * 60);
            ctx.fillText(-halfR, 205, 200 + halfR * 60);
            ctx.fillText(halfR, 205, 200 - halfR * 60);

            ctx.fillText("y", 205, 8);
            ctx.fillText("x", 400, 215);


        }

        function drawShapes(R) {
            const scale = 60; // Масштаб для отображения

            // Первая четверть: часть окружности
            ctx.beginPath();
            ctx.arc(200, 200, R * scale, -(Math.PI * 0.5), 0); // Часть окружности сверху
            ctx.lineTo(200, 200);
            ctx.fillStyle = 'rgba(51, 153, 255, 0.5)';
            ctx.fill();
            ctx.stroke();

            // Вторая четверть: прямоугольник
            ctx.beginPath();
            ctx.rect(200 - (R * scale) / 2, 200 - R * scale, (R * scale) / 2, R * scale);
            ctx.fillStyle = 'rgba(51, 153, 255, 0.5)';
            ctx.fill();
            ctx.stroke();

            // Третья четверть: треугольник
            ctx.beginPath();
            ctx.moveTo(200 - R * scale, 200);
            ctx.lineTo(200, 200 + R * scale);
            ctx.lineTo(200, 200);
            ctx.closePath();
            ctx.fillStyle = 'rgba(51, 153, 255, 0.5)';
            ctx.fill();
            ctx.stroke();

        }

        function onlyOne(checkbox) {
            const checkboxes = document.getElementsByName('coor_x');
            checkboxes.forEach((item) => {
                if (item !== checkbox) item.checked = false;
            });
        }

        document.getElementById('coor_r-select').addEventListener('change', function() {
            const R = parseFloat(this.value);
            const errorMessageDiv = document.getElementById('error_message');
            errorMessageDiv.textContent = ''

            drawAxes(R);
            drawShapes(R);
        });

        // Инициализация с начальным значением R
        const R = parseFloat(document.getElementById('coor_r-select').value);
        drawAxes(R);
        drawShapes(R);

        document.getElementById('coor_y1').addEventListener('input', function() {
            const input = this.value;
            const errorMessage = document.getElementById('error_message');

            // Проверяем, является ли введенное значение числом
            const isNumber = /^-?\d*\.?\d*$/.test(input); // Регулярное выражение для проверки числа

            if (!isNumber) {
                this.style.backgroundColor = 'lightcoral'; // Красим поле в светло-красный
                coor_y1.textContent = ''; // Не передаем данные в форму
                errorMessage.textContent = 'Ошибка: введите число.'; // Сообщение об ошибке
            } else if (input &lt; -5 || input > 3) {
                this.value = null; // Очищаем поле
                this.style.backgroundColor = 'lightcoral'; // Красим поле в светло-красный
                coor_y1.textContent = ''; // Не передаем данные в форму
                errorMessage.textContent = 'Ошибка ввода координаты Y. X должен быть от -5 до 3'; // Сообщение об ошибке
            } else {
                this.style.backgroundColor = ''; // Сбрасываем цвет поля
                coor_y1.textContent = input; // Передаем данные в форму
                errorMessage.textContent = ''; // Очищаем сообщение об ошибке
            }
        });

        canvas.addEventListener('click', function(event) {
            const rect = canvas.getBoundingClientRect();
            const x = event.clientX - rect.left; // Получаем координату X
            const y = event.clientY - rect.top; // Получаем координату Y

            // Преобразуем координаты в систему координат вашей области
            const scaledX = (x - 200) / 60; // Масштабируем по X
            const scaledY = (200 - y) / 60; // Масштабируем по Y

            const rValue = document.getElementById('coor_r-select').value;

            const errorMessageDiv = document.getElementById('error_message');
            errorMessageDiv.textContent = ''; // Сбрасываем сообщение об ошибке

            if (rValue === '') {
                errorMessageDiv.textContent = 'Выберете значение R';
                return; // Прерываем выполнение, если есть ошибка
            }

            // Отправляем данные на сервер
            $.ajax({
                url: '/fcgi-bin/lab1.jar',
                method: 'GET',
                dataType: 'html',
                data: {
                    coor_x: scaledX,
                    coor_y: scaledY,
                    coor_r: parseFloat(document.getElementById('coor_r-select').value)
                },
                success: function(data, textStatus, jqXHR) {
                    document.getElementById('resultTable').innerHTML = data;
                }
            });

        });
    </script>
</h:head>

<h:body>
    <div id="header">
        <span id="myname">Путинцев Данил Денисович</span>
        <span id="mygroup">P3207</span>
        <span id="variant">Вариант: 430331</span>
    </div>
    <div id="form">
        <div id="coor_x" class="coors">
            <span class="ui-float-label">
                <p:inputText class="float-input" value="#{CoorBean.coorX}"/>
                <p:outputLabel for="@previous" value="Координата X"/>
            </span>
        </div>
        <div id="coor_y" class="coors">
            <h:form>
                <h:panelGroup id="tabPanel">
                    <h:outputLabel value="Select CoorY: " />

                    <h:panelGrid columns="9">
                        <c:forEach items="#{CoorBean.coorYOptions}" var="option">
                            <h:commandLink value="#{option}" action="#{CoorBean.selectCoorY(option)}" />
                        </c:forEach>
                    </h:panelGrid>
                </h:panelGroup>

                <h:outputText value="Selected CoorY: #{CoorBean.coorY}" />
            </h:form>
        </div>
        <div id="coor_r" class="coors">
            <span class="ui-float-label">
                <p:inputText class="float-input" value="#{CoorBean.coorR}"/>
                <p:outputLabel for="@previous" value="Координата R"/>
            </span>
        </div>
        <div id="error_message" style="color: red;">

        </div>
        <div>
            <button type="submit">Отправить</button>
        </div>
        <canvas id="canvas" width="400" height="400"> </canvas>
    </div>


</h:body>

</html>