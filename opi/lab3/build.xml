<?xml version="1.0"?>
<project name="lab3" default="build" xmlns:ivy="antlib:org.apache.ivy.ant">
	<property file="build.properties"/>
    
    <path id="test.classpath">
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
        <pathelement path="${classes.dir}"/>
    </path>

	<target name="compile">
        <ivy:configure />
        <ivy:resolve />
        <ivy:retrieve pattern="${lib.dir}/[artifact]-[revision](-[classifier]).[ext]"/>

    	<mkdir dir="${build.dir}" />
    	<mkdir dir="${classes.dir}" />
    	<mkdir dir="${dist.dir}" />
        <mkdir dir="${test.classes.dir}"/>

    	<javac srcdir="${src.dir}" destdir="${classes.dir}" includeantruntime="false">
            <classpath>
                <fileset dir="${lib.dir}" includes="**/*.jar"/>
                <fileset dir="${web.dir}/WEB-INF/lib" includes="**/*.jar"/>
            </classpath>
        </javac>
        <javac srcdir="${test.dir}" destdir="${test.classes.dir}" includeantruntime="false">
            <classpath>
                <path refid="test.classpath"/>
                <pathelement path="${classes.dir}"/>
            </classpath>
        </javac>
	</target>

	<target name="build" depends="compile">
        <war destfile="${war.file}" webxml="${web.dir}/WEB-INF/web.xml">
            <classes dir="${classes.dir}"/>
            
            <lib dir="${lib.dir}">
                <include name="*.jar"/>
                <exclude name="jakarta.servlet-api*.jar"/>
            </lib>
            
            <fileset dir="${web.dir}">
                <include name="**/*.xhtml"/>
                <include name="**/*.css"/>
                <include name="**/*.js"/>
                <include name="**/*.png"/>
                <include name="**/*.jpg"/>
            </fileset>
        </war>
	</target>

	<target name="clean">
		 <delete dir="${build.dir}"/>
        <delete dir="${dist.dir}"/>
        <delete dir="${lib.dir}"/>
        <delete dir="${revisions.dir}"/>
	</target>
	
	<target name="test" depends="build">
    <mkdir dir="${test.reports.dir}"/>
    
    <junit printsummary="on" haltonfailure="true" haltonerror="true">
        <classpath>
            <path refid="test.classpath"/>
            <pathelement location="${test.classes.dir}"/>
            <pathelement location="${classes.dir}"/>
        </classpath>
        <batchtest fork="yes" todir="${test.reports.dir}">
            <formatter type="plain"/>
            <fileset dir="${test.dir}" includes="**/*Test.java"/>
        </batchtest>
    </junit>
    </target>


	<target name="music" depends="build">
            <exec executable="mpv" osfamily="unix" failonerror="false">
            <arg value="--no-terminal"/>
            <arg value="--no-video"/> 
            <arg value="./lab3/music.mp3"/>
        </exec>
    </target>

    

	<target name="team">
        <mkdir dir="${revisions.dir}"/>

        <exec executable="git" outputproperty="git.commits">
            <arg value="log"/>
            <arg value="--pretty=format:%H"/>
            <arg value="-n"/>
            <arg value="4"/>
        </exec>

    <tempfile property="commits.file" suffix=".txt" deleteonexit="true"/>
    <echo message="${git.commits}" file="${commits.file}"/>

    <exec executable="bash" osfamily="unix">
        <arg value="-c"/>
        <arg value="cat ${commits.file} | xargs -I {} ant -Dcommit={} process-commit"/>
    </exec>
        <zip destfile="${dist.dir}/all-revisions.zip" basedir="${revisions.dir}"/>
    </target>

   <target name="process-commit">    
    <exec executable="git">
        <arg value="checkout"/>
        <arg value="${commit}"/> 
    </exec>

    <antcall target="build"/>
    <copy file="${war.file}" tofile="${revisions.dir}/lab3-${commit}.war"/>
    <exec executable="git">
        <arg value="checkout"/>
        <arg value="main"/> 
    </exec>
</target>
</project>